// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  events      Event[] // One-to-many: One user can manage many events
  tasks       Task[]       @relation("UserTasks") // Users can be assigned multiple tasks
  accounts    Account[]
  sessions    Session[]
  assignments Assignment[]
}

// Define Event model
model Event {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime
  budget    Budget?
  userId    String // Foreign key to User
  user      User     @relation(fields: [userId], references: [id])
  tasks     Task[] // One-to-many: One event can have multiple tasks
  createdAt DateTime @default(now())

  @@index([userId])
}

// Define Budget model
model Budget {
  id          Int          @id @default(autoincrement())
  total       Float // Total planned budget
  actual      Float // Actual spent budget
  eventId     Int          @unique
  event       Event        @relation(fields: [eventId], references: [id])
  budgetItems BudgetItem[] // A budget has multiple items
}

// Define BudgetItem model
model BudgetItem {
  id          Int    @id @default(autoincrement())
  name        String
  plannedCost Float // Planned cost for the item
  actualCost  Float // Actual cost incurred for the item
  budgetId    Int // Foreign key to Budget
  budget      Budget @relation(fields: [budgetId], references: [id])

  @@index([budgetId])
}

// Define Task model
model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  status      String // e.g., "pending", "in-progress", "completed"
  dueDate     DateTime?
  eventId     Int // Foreign key to Event
  event       Event        @relation(fields: [eventId], references: [id])
  assignees   User[]       @relation("UserTasks") // Many-to-many: Tasks can be assigned to multiple users
  assignments Assignment[]

  @@index([eventId])
}

// Define Assignment join model for Users <-> Tasks many-to-many relation
model Assignment {
  id     Int    @id @default(autoincrement())
  userId String
  taskId Int
  user   User   @relation(fields: [userId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId])
  @@index([taskId])
}
